Q1.What is method overloading?
   =When a class has more than one method with same name but different parameters, then we call those methods are overloaded. 
     Overloaded methods will have same name but different number of arguments or different types of arguments.
     
Q2.Can we declare one overloaded method as static and another one as non-static?
   =Yes. Overloaded methods can be either static or non static.
   
Q3.Compiler uses method signature to check whether the method is overloaded or duplicated.
   =Compiler uses method signature to check whether the method is overloaded or duplicated. Duplicate methods will have same method signatures i.e same name, same number of arguments and 
      same types of arguments. Overloaded methods will also have same name but differ in number of arguments or else types of arguments.
      
Q4. Is it possible to have two methods in a class with same method signature but different return types?
   =No, compiler will give duplicate method error. Compiler checks only method signature for duplication not the return types.
      If two methods have same method signature, straight away it gives compile time error.
      
Q5.In “MyClass” , there is a method called “myMethod” with four different overloaded forms. 
      All four different forms have different visibility ( private, protected, public and default). Is “myMethod” properly overloaded? 
   = Yes. Compiler checks only method signature for overloading of methods not the visibility of methods.
   
Q6.Can overloaded methods be synchronized?
   =Yes. Overloaded methods can be synchronized.
   
Q7.Can we overload main() method?
   =Yes, we can overload main() method. A class can have any number of main() methods but execution starts from public static void main(String[] args) only.
   
Q8.Can we declare overloaded methods as final?
   =Yes, we can declare overloaded methods as final.
   
Q9.Overloading is the best example of dynamic binding. True or false?
   =False. Overloading is the best example for static binding.
   
Q10.Can overloaded method be overrided?
   =Yes, we can override a method which is overloaded in super class.
